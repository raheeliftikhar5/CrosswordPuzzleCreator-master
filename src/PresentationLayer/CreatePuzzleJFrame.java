/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PresentationLayer;

import BusinessLogic.Controller;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.StringTokenizer;
import javax.swing.DefaultCellEditor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author hasaan
 */
public class CreatePuzzleJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CreatePuzzleJFrame
     */
    private int lastGridSize = 4;
    private int gridSize;
    private Character[][] puzzleGrid ;
    private LinkedHashMap<String, String>  acrossAnsClueHM = null;
    private LinkedHashMap<String, String> downAnsClueHM = null;

    public CreatePuzzleJFrame() {
        //create table model
        
        initComponents();
        HelpfulStaticFunctions.locateAtCentre(this);
        
        //make jSpinners non-editable
        ((DefaultEditor) boxSizejSpinner.getEditor()).getTextField().setEditable(false);
        ((DefaultEditor) gridSizejSpinner.getEditor()).getTextField().setEditable(false);
        puzzlejTable.setGridColor(Color.BLACK);   
        

        fileNameLabel.setText("No data source selected");
        fileNameLabel.setAlignmentY(RIGHT_ALIGNMENT);
        //make puzzle Jpanel scrollable

//        JPanel panel = puzzlejPanel;
//                Container c = frame.getContentPane();
//                panel.setSize(100,100);
//                panel.setLayout(new GridLayout(1000,1));
//                for(int i = 0; i<1000;i++)
//                panel.add(new JLabel("JLabel "+i));
//
//                JScrollPane jsp = new JScrollPane(panel);
//                c.add(jsp);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        TitlejLabel = new javax.swing.JLabel();
        ControlsjPanel = new javax.swing.JPanel();
        gridSizejSpinner = new javax.swing.JSpinner();
        gridSizejLabel = new javax.swing.JLabel();
        boxSizejLabel = new javax.swing.JLabel();
        boxSizejSpinner = new javax.swing.JSpinner();
        settingsjButton = new javax.swing.JButton();
        fileNameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        puzzlejPanel = new javax.swing.JPanel();
        puzzlejScrollPane = new javax.swing.JScrollPane();
        puzzlejTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        acrossCluesjTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        downCluesjTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        generatePuzzlejButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crossword Puzzle Creator");
        setMinimumSize(null);

        TitlejLabel.setBackground(new java.awt.Color(204, 204, 204));
        TitlejLabel.setFont(new java.awt.Font("Luminari", 0, 36)); // NOI18N
        TitlejLabel.setForeground(new java.awt.Color(204, 0, 0));
        TitlejLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitlejLabel.setText("Crossword Puzzle Creator");
        TitlejLabel.setToolTipText("");

        gridSizejSpinner.setModel(new javax.swing.SpinnerNumberModel(4, 4, 20, 1));
        gridSizejSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gridSizejSpinnerStateChanged(evt);
            }
        });

        gridSizejLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        gridSizejLabel.setText("Grid Size (N x N) :");

        boxSizejLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        boxSizejLabel.setText("Box Size:");

        boxSizejSpinner.setModel(new javax.swing.SpinnerNumberModel(40, 10, 90, 2));
        boxSizejSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                boxSizejSpinnerStateChanged(evt);
            }
        });

        settingsjButton.setText("Select Datasource");
        settingsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ControlsjPanelLayout = new javax.swing.GroupLayout(ControlsjPanel);
        ControlsjPanel.setLayout(ControlsjPanelLayout);
        ControlsjPanelLayout.setHorizontalGroup(
            ControlsjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlsjPanelLayout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(gridSizejLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridSizejSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(boxSizejLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxSizejSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(settingsjButton)
                .addContainerGap())
        );
        ControlsjPanelLayout.setVerticalGroup(
            ControlsjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlsjPanelLayout.createSequentialGroup()
                .addGroup(ControlsjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gridSizejSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gridSizejLabel)
                    .addComponent(boxSizejSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxSizejLabel)
                    .addComponent(settingsjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 1, Short.MAX_VALUE))
            .addComponent(fileNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        puzzlejScrollPane.setEnabled(false);

        puzzlejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {" ", " ", " ", " "},
                {" ", " ", " ", " "},
                {" ", " ", " ", " "},
                {" ", " ", " ", " "}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        puzzlejTable.setAutoscrolls(false);
        puzzlejTable.setTableHeader(null);
        puzzlejScrollPane.setViewportView(puzzlejTable);

        javax.swing.GroupLayout puzzlejPanelLayout = new javax.swing.GroupLayout(puzzlejPanel);
        puzzlejPanel.setLayout(puzzlejPanelLayout);
        puzzlejPanelLayout.setHorizontalGroup(
            puzzlejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(puzzlejPanelLayout.createSequentialGroup()
                .addComponent(puzzlejScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        puzzlejPanelLayout.setVerticalGroup(
            puzzlejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(puzzlejPanelLayout.createSequentialGroup()
                .addComponent(puzzlejScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 288, Short.MAX_VALUE))
        );

        acrossCluesjTextArea.setColumns(20);
        acrossCluesjTextArea.setRows(5);
        jScrollPane1.setViewportView(acrossCluesjTextArea);

        downCluesjTextArea.setColumns(20);
        downCluesjTextArea.setRows(5);
        jScrollPane2.setViewportView(downCluesjTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(puzzlejPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(puzzlejPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        generatePuzzlejButton.setText("Generate");
        generatePuzzlejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePuzzlejButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jCheckBox1.setText(" Show Answers");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(generatePuzzlejButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 513, Short.MAX_VALUE)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton4)
                .addComponent(generatePuzzlejButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(TitlejLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ControlsjPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TitlejLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ControlsjPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void settingsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsjButtonActionPerformed
        //this.setEnabled(false);
//        new SettingsJFrame(this).setVisible(true);
        File directory = createJFileChooser();
        Controller c = Controller.getInstance();
        c.setDataSource(directory);
        fileNameLabel.setText(directory.getName());
    }//GEN-LAST:event_settingsjButtonActionPerformed

    private File createJFileChooser()
    {
        String directory = "";
        final JFileChooser jFileChooser1 = new JFileChooser();
        jFileChooser1.setDialogTitle("Select Datasource");
        jFileChooser1.setDialogType(JFileChooser.OPEN_DIALOG);
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        jFileChooser1.setFileFilter(filter);
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        jFileChooser1.showOpenDialog(this);
        if(jFileChooser1.showOpenDialog(this)==JFileChooser.APPROVE_OPTION)
        {
            directory = jFileChooser1.getSelectedFile().toString();
            //System.out.println(jFileChooser1.getSelectedFile().toString());
        }
        return new File(directory);
    }
    
    private void generatePuzzlejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePuzzlejButtonActionPerformed

        Controller controller = Controller.getInstance();
        if(controller.checkIfFileExist() == false)
        {
            JOptionPane.showMessageDialog(null, "Datasource not found.Kindly select the datasource.", "Datasource not found", JOptionPane.INFORMATION_MESSAGE);
        }
        else
        {
            gridSize = (int)gridSizejSpinner.getValue();

            puzzleGrid = new Character[gridSize][gridSize];
            acrossAnsClueHM = new LinkedHashMap<String, String>();
            downAnsClueHM = new LinkedHashMap<String, String>();
    
            jCheckBox1.setSelected(false);
            controller.generatePuzzle(puzzleGrid,acrossAnsClueHM, downAnsClueHM);

            Character[][] grid = new Character[gridSize][gridSize];
            for(int i=0;i<gridSize;i++)
            {
                for(int j=0;j<gridSize;j++)
                {
                    if(puzzleGrid[i][j]!='.')
                    {
                        grid[i][j] = ' ';
                    }
                    else
                    {
                        grid[i][j] = '.';
                    }
                    
                }
            }
              
              
            //set table model
                String[] nulls = new String[puzzleGrid.length];
                DefaultTableModel model = new javax.swing.table.DefaultTableModel(grid, nulls);
                puzzlejTable.setModel(model);
            //
//              for(int i=0;i<gridSize;i++)
//              {
//                  for(int j=0;j<gridSize;j++)
//                  {
//                      DefaultTableModel dtm = (DefaultTableModel) puzzlejTable.getModel();
//                      if(dtm.getValueAt(i, j).toString().matches(".")==true)
//                      {
//                         
//                      }
//                  }
//              }
               puzzlejTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
               
               acrossCluesjTextArea.setText("");
               downCluesjTextArea.setText("");

              for(String key: acrossAnsClueHM.keySet()){
                  String value = acrossAnsClueHM.get(key);
                  StringTokenizer strtok = new StringTokenizer(value, "**");
                  int position = Integer.parseInt(strtok.nextToken());
                  int wordNo = Integer.parseInt(strtok.nextToken());
                  String clue = strtok.nextToken();
                  
                  acrossCluesjTextArea.append(""+wordNo+". "+clue +"\n");
                  
                    for(int i=0;i<gridSize;i++)
                    {
                        for(int j=0;j<gridSize;j++)
                        {
                            if(puzzleGrid[i][j]!='.')
                            {
                                if((i*gridSize)+j==position)
                                {
                                    puzzlejTable.setValueAt(wordNo, i, j);
                                }
                            }
                        }
                    }// bring cell number and then display starting point of word in grid
                  
              }
              for(String key: downAnsClueHM.keySet())
              {
                  String value = downAnsClueHM.get(key);
                  StringTokenizer strtok = new StringTokenizer(value, "**");
                  int position = Integer.parseInt(strtok.nextToken());
                  int wordNo = Integer.parseInt(strtok.nextToken());
                  String clue = strtok.nextToken();
                  
                  downCluesjTextArea.append(""+wordNo+". "+clue+"\n");
                  
                    for(int i=0;i<gridSize;i++)
                    {
                        for(int j=0;j<gridSize;j++)
                        {
                            if(puzzleGrid[i][j]!='.')
                            {
                                if((i*gridSize)+j==position)
                                {
                                    puzzlejTable.setValueAt(wordNo, i, j);
                                }
                            }
                        }
                    }
              }
              
        }    

    }//GEN-LAST:event_generatePuzzlejButtonActionPerformed

    public class CustomCellRenderer extends DefaultTableCellRenderer
    {

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column)
        {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if(value!=null)
            {
                String cellValue = value.toString();
                //set it so it can display unicode characters
                if (cellValue.compareTo(".")==0)
                {
                    System.out.println(cellValue);

                    cell.setFont(new Font("MS Mincho",Font.PLAIN, 5));
                    cell.setBackground(Color.BLACK);
                    
                }
                else
                {
                    cell.setFont(new Font("MS Mincho",Font.PLAIN, 12));
                    cell.setBackground(Color.WHITE);
                }
            }
            //marks a cell red if it is a duplicate variable name
//            if(column == VARIABLE_COL)
//            {
//                
//                boolean dup = false;
//                String[] columnData = theTable.getColumnData(column);
//                //check if this is already in the list
//                for(int i =0; i < columnData.length; i++)
//                {
//                    String currTableValue = columnData[i];
//                    if(currTableValue.equals(cellValue) && i != row)
//                    {
//                        dup = true;
//                        break;
//                    }
//                }
//                //we found a dup
//                if(dup == true)
//                {
//                    cell.setBackground(Color.red);
//                }
//            }
            return cell;
        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setEnabled(false);
        new SavePuzzleJFrame(this).setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void boxSizejSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_boxSizejSpinnerStateChanged
                //boxSize is new rows' width and columns' height 
        int boxSize = (int)boxSizejSpinner.getValue();

        //set new height for all rows
        puzzlejTable.setRowHeight(boxSize);

        //set new width for all columns
        TableColumnModel columnModel = puzzlejTable.getColumnModel();
        int columnCount = columnModel.getColumnCount();

        int newWidth = boxSize*columnCount+4;
        int newHeight = boxSize*puzzlejTable.getRowCount()+4;//+4 to avoid scroll bar
        puzzlejScrollPane.setSize(new Dimension(newWidth, newHeight));
        
//        for(int col=0; col< columnCount; col++){
//            columnModel.getColumn(col).setPreferredWidth(boxSize);
//        } 
    }//GEN-LAST:event_boxSizejSpinnerStateChanged

    private void gridSizejSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gridSizejSpinnerStateChanged
        //gridSize is no of rows and columns 
        int gridSize = (int)gridSizejSpinner.getValue();
//        if(lastGridSize > gridSize){
//            //reduce one column
//        }
//        else{
//            //add one column
//        puzzlejTable.getColumnModel().addColumn(new TableColumn(lastGridSize));
//            
//        }
        
        puzzlejTable.setModel(new javax.swing.table.DefaultTableModel(gridSize, gridSize));
        boxSizejSpinnerStateChanged(evt);
//        //set new width for all columns
//        TableColumnModel columnModel = puzzlejTable.getColumnModel();
//        columnModel.addColumn(new TableColumn(WIDTH));
        
//        lastGridSize = gridSize;
    }//GEN-LAST:event_gridSizejSpinnerStateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected())
        {
            if(acrossAnsClueHM==null && downAnsClueHM==null)
            {
                jCheckBox1.setSelected(false);
                JOptionPane.showMessageDialog(null, "Nothing to display.Kindly generate the puzzle first.", "Nothing to display", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
              
                //set table model
                String[] nulls = new String[puzzleGrid.length];
                DefaultTableModel model = new javax.swing.table.DefaultTableModel(puzzleGrid, nulls);
                puzzlejTable.setModel(model);
            
//              for(int i=0;i<gridSize;i++)
//              {
//                  for(int j=0;j<gridSize;j++)
//                  {
//                      DefaultTableModel dtm = (DefaultTableModel) puzzlejTable.getModel();
//                      if(dtm.getValueAt(i, j).toString().matches(".")==true)
//                      {
//                         
//                      }
//                  }
//              }
               puzzlejTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
               
               acrossCluesjTextArea.setText("");
               downCluesjTextArea.setText("");

               for(String key: acrossAnsClueHM.keySet()){
                  String value = acrossAnsClueHM.get(key);
                  StringTokenizer strtok = new StringTokenizer(value, "**");
                  int position = Integer.parseInt(strtok.nextToken());
                  int wordNo = Integer.parseInt(strtok.nextToken());
                  String clue = strtok.nextToken();
                  
                  acrossCluesjTextArea.append(""+wordNo+". "+clue+"\n");
                  
              }
              for(String key: downAnsClueHM.keySet())
              {
                  String value = downAnsClueHM.get(key);
                  StringTokenizer strtok = new StringTokenizer(value, "**");
                  int position = Integer.parseInt(strtok.nextToken());
                  int wordNo = Integer.parseInt(strtok.nextToken());
                  String clue = strtok.nextToken();
                  
                  downCluesjTextArea.append(""+wordNo+". "+clue +"\n");
              }
            }
        }
        else
        {
            Character[][] grid = new Character[gridSize][gridSize];
            for(int i=0;i<gridSize;i++)
            {
                for(int j=0;j<gridSize;j++)
                {
                    if(puzzleGrid[i][j]!='.')
                    {
                        grid[i][j] = ' ';
                    }
                    else
                    {
                        grid[i][j] = '.';
                    }
                    
                }
            }
              
              
            //set table model
                String[] nulls = new String[puzzleGrid.length];
                DefaultTableModel model = new javax.swing.table.DefaultTableModel(grid, nulls);
                puzzlejTable.setModel(model);
            //
//              for(int i=0;i<gridSize;i++)
//              {
//                  for(int j=0;j<gridSize;j++)
//                  {
//                      DefaultTableModel dtm = (DefaultTableModel) puzzlejTable.getModel();
//                      if(dtm.getValueAt(i, j).toString().matches(".")==true)
//                      {
//                         
//                      }
//                  }
//              }
               puzzlejTable.setDefaultRenderer(Object.class, new CustomCellRenderer());
               
               acrossCluesjTextArea.setText("");
               downCluesjTextArea.setText("");

              for(String key: acrossAnsClueHM.keySet()){
                  String value = acrossAnsClueHM.get(key);
                  StringTokenizer strtok = new StringTokenizer(value, "**");
                  int position = Integer.parseInt(strtok.nextToken());
                  int wordNo = Integer.parseInt(strtok.nextToken());
                  String clue = strtok.nextToken();
                  
                  acrossCluesjTextArea.append(""+wordNo+". "+clue +"\n");
                  
                    for(int i=0;i<gridSize;i++)
                    {
                        for(int j=0;j<gridSize;j++)
                        {
                            if(puzzleGrid[i][j]!='.')
                            {
                                if((i*gridSize)+j==position)
                                {
                                    puzzlejTable.setValueAt(wordNo, i, j);
                                }
                            }
                        }
                    }// bring cell number and then display starting point of word in grid
                  
              }
              for(String key: downAnsClueHM.keySet())
              {
                  String value = downAnsClueHM.get(key);
                  StringTokenizer strtok = new StringTokenizer(value, "**");
                  int position = Integer.parseInt(strtok.nextToken());
                  int wordNo = Integer.parseInt(strtok.nextToken());
                  String clue = strtok.nextToken();
                  
                  downCluesjTextArea.append(""+wordNo+". "+clue +"\n");
                  
                    for(int i=0;i<gridSize;i++)
                    {
                        for(int j=0;j<gridSize;j++)
                        {
                            if(puzzleGrid[i][j]!='.')
                            {
                                if((i*gridSize)+j==position)
                                {
                                    puzzlejTable.setValueAt(wordNo, i, j);
                                }
                            }
                        }
                    }
              }
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlsjPanel;
    private javax.swing.JLabel TitlejLabel;
    private javax.swing.JTextArea acrossCluesjTextArea;
    private javax.swing.JLabel boxSizejLabel;
    private javax.swing.JSpinner boxSizejSpinner;
    private javax.swing.JTextArea downCluesjTextArea;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JButton generatePuzzlejButton;
    private javax.swing.JLabel gridSizejLabel;
    private javax.swing.JSpinner gridSizejSpinner;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel puzzlejPanel;
    private javax.swing.JScrollPane puzzlejScrollPane;
    private javax.swing.JTable puzzlejTable;
    private javax.swing.JButton settingsjButton;
    // End of variables declaration//GEN-END:variables

    private void updatePuzzleTable() {
        }
}
